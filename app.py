import os
import streamlit as st
from google.cloud import storage
import tensorflow as tf
import json
import numpy as np
import cv2

# ========== TH√îNG TIN B·ªÜNH ==========
disease_info = {
    "Apple___Apple_scab": {
        "name": "Apple Scab",
        "desc": "B·ªánh ƒë·ªëm v·∫£y tr√™n t√°o do n·∫•m Venturia inaequalis g√¢y ra, xu·∫•t hi·ªán c√°c ƒë·ªëm n√¢u/x√°m tr√™n l√° v√† qu·∫£, l√†m gi·∫£m nƒÉng su·∫•t v√† ch·∫•t l∆∞·ª£ng qu·∫£.",
        "treatment": "C·∫Øt b·ªè l√° b·ªánh, phun thu·ªëc g·ªëc ƒë·ªìng ho·∫∑c thu·ªëc ch·ª©a mancozeb, v·ªá sinh v∆∞·ªùn c√¢y."
    },
    "Apple___Cedar_apple_rust": {
        "name": "Apple Rust",
        "desc": "B·ªánh g·ªâ s·∫Øt tr√™n t√°o, g√¢y ra c√°c ƒë·ªëm m√†u cam tr√™n l√°, c√≥ th·ªÉ l√†m r·ª•ng l√° s·ªõm v√† ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª± ph√°t tri·ªÉn c·ªßa c√¢y.",
        "treatment": "Lo·∫°i b·ªè l√° b·ªánh, d√πng thu·ªëc di·ªát n·∫•m (nh∆∞ mancozeb, myclobutanil), tr·ªìng gi·ªëng kh√°ng b·ªánh."
    },
    "Apple___healthy": {
        "name": "Apple Healthy",
        "desc": "L√° t√°o kh·ªèe m·∫°nh, kh√¥ng c√≥ d·∫•u hi·ªáu b·ªánh l√Ω.",
        "treatment": "Kh√¥ng c√≥ b·ªánh, ti·∫øp t·ª•c chƒÉm s√≥c t·ªët, b√≥n ph√¢n h·ª£p l√Ω v√† t∆∞·ªõi n∆∞·ªõc ƒë·∫ßy ƒë·ªß."
    },
    # ... (b·ªï sung c√°c class kh√°c nh∆∞ b·∫°n ƒë√£ l√†m)
}

# ========== T·∫¢I MODEL V√Ä FILE JSON T·ª™ GCS ==========
BUCKET_NAME = "plant-disease-model-bucket"
MODEL_BLOB = "plant_disease_model.h5"
CLASS_INDICES_BLOB = "class_indices.json"
MODEL_LOCAL = "plant_disease_model.h5"
CLASS_INDICES_LOCAL = "class_indices.json"
IMG_SIZE = 224

def download_blob(bucket_name, source_blob_name, destination_file_name):
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    blob.download_to_filename(destination_file_name)
    print(f"Downloaded {source_blob_name} from bucket {bucket_name} to {destination_file_name}")

@st.cache_resource
def load_model_and_indices():
    if not os.path.exists(MODEL_LOCAL):
        download_blob(BUCKET_NAME, MODEL_BLOB, MODEL_LOCAL)
    if not os.path.exists(CLASS_INDICES_LOCAL):
        download_blob(BUCKET_NAME, CLASS_INDICES_BLOB, CLASS_INDICES_LOCAL)
    model = tf.keras.models.load_model(MODEL_LOCAL)
    with open(CLASS_INDICES_LOCAL, "r") as f:
        class_indices = json.load(f)
    class_indices = {int(k): v for k, v in class_indices.items()}
    return model, class_indices

try:
    model, class_indices_dict = load_model_and_indices()
except Exception as e:
    st.error(f"L·ªói khi t·∫£i model ho·∫∑c file json: {e}")
    st.stop()

def predict_disease(image, model, class_indices):
    img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)
    prediction = model.predict(img)
    pred_class = int(np.argmax(prediction))
    confidence = float(np.max(prediction)) * 100
    class_name = class_indices[pred_class]
    return class_name, confidence

# ========== GIAO DI·ªÜN STREAMLIT ==========

st.set_page_config(page_title="Nh·∫≠n di·ªán b·ªánh l√° c√¢y", page_icon=":herb:", layout="centered")
st.markdown("<h1 style='text-align: center; color: green;'>üåø Nh·∫≠n di·ªán b·ªánh l√° c√¢y</h1>", unsafe_allow_html=True)

tab1, tab2 = st.tabs(["üìÅ T·∫£i ·∫£nh l√™n", "üì∑ Ch·ª•p ·∫£nh webcam"])

with tab1:
    uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh l√° c√¢y", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(file_bytes, 1)
        st.image(image, caption="·∫¢nh l√° c√¢y", use_column_width=True)
        if st.button("Ph√°t hi·ªán b·ªánh"):
            with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                class_name, confidence = predict_disease(image, model, class_indices_dict)
            info = disease_info.get(class_name)
            if info:
                st.markdown(
                    f"""
                    <div style="background-color:#e6fff2;padding:16px;border-radius:8px;">
                        <h3 style="color:#d7263d;">{info['name']}</h3>
                        <b>M√¥ t·∫£:</b> {info['desc']}<br>
                        <b>C√°ch ch·ªØa tr·ªã:</b> {info['treatment']}
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.warning("Ch∆∞a c√≥ th√¥ng tin chi ti·∫øt v·ªÅ b·ªánh n√†y.")
            st.caption(f"ƒê·ªô tin c·∫≠y: {confidence:.2f}%")
    else:
        st.info("Vui l√≤ng upload ·∫£nh l√° c√¢y ƒë·ªÉ nh·∫≠n di·ªán.")

with tab2:
    try:
        from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
        import av

        class LeafDiseaseTransformer(VideoTransformerBase):
            def transform(self, frame):
                img = frame.to_ndarray(format="bgr24")
                img_resized = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
                return img_resized

        ctx = webrtc_streamer(
            key="webcam",
            video_transformer_factory=LeafDiseaseTransformer,
            media_stream_constraints={"video": True, "audio": False},
            async_transform=True,
        )

        if ctx.video_transformer and ctx.video_transformer.frame is not None:
            st.image(ctx.video_transformer.frame, caption="·∫¢nh webcam", use_column_width=True)
            if st.button("Ph√°t hi·ªán b·ªánh t·ª´ webcam"):
                with st.spinner("ƒêang d·ª± ƒëo√°n..."):
                    class_name, confidence = predict_disease(ctx.video_transformer.frame, model, class_indices_dict)
                info = disease_info.get(class_name)
                if info:
                    st.markdown(
                        f"""
                        <div style="background-color:#e6fff2;padding:16px;border-radius:8px;">
                            <h3 style="color:#d7263d;">{info['name']}</h3>
                            <b>M√¥ t·∫£:</b> {info['desc']}<br>
                            <b>C√°ch ch·ªØa tr·ªã:</b> {info['treatment']}
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.warning("Ch∆∞a c√≥ th√¥ng tin chi ti·∫øt v·ªÅ b·ªánh n√†y.")
                st.caption(f"ƒê·ªô tin c·∫≠y: {confidence:.2f}%")
        else:
            st.info("B·∫≠t webcam ƒë·ªÉ ch·ª•p ·∫£nh l√° c√¢y.")
    except Exception as e:
        st.warning("Webcam kh√¥ng kh·∫£ d·ª•ng ho·∫∑c thi·∫øu streamlit-webrtc.")

st.caption("Tri·ªÉn khai b·ªüi Google Cloud Run, model v√† d·ªØ li·ªáu l∆∞u tr√™n Google Cloud Storage.")

